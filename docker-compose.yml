version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sentiment_db
    environment:
      POSTGRES_DB: sentiment_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeme123}
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sentiment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sentiment_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sentiment_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: sentiment_api
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - DB_DRIVER=sqlite
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=sentiment_db
      - DB_USER=postgres
      - DB_PASSWORD=${DB_PASSWORD:-changeme123}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your-secret-key-change-in-production}
      - TWITTER_API_KEY=${TWITTER_API_KEY}
      - TWITTER_API_SECRET=${TWITTER_API_SECRET}
      - TWITTER_ACCESS_TOKEN=${TWITTER_ACCESS_TOKEN}
      - TWITTER_ACCESS_TOKEN_SECRET=${TWITTER_ACCESS_TOKEN_SECRET}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - sentiment_network
    volumes:
      - ./backend:/app
      - model_cache:/root/.cache/huggingface
    restart: unless-stopped

  # Frontend (React/Node)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: sentiment_frontend
    ports:
      - "3000:80"
    environment: []
    depends_on:
      - backend
    networks:
      - sentiment_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sentiment_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    networks:
      - sentiment_network
    restart: unless-stopped

networks:
  sentiment_network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  model_cache:
